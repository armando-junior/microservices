{
  "info": {
    "name": "Inventory Service API - Complete",
    "description": "Complete API collection for Inventory Service\n\n**Base URL:** http://localhost:9002/api\n**Documentation:** See API-DOCS.md\n**Version:** 1.0.0\n\n### Sprint 3-4 - 100% Complete âœ…\n\n**15 Endpoints Total:**\n- âœ… Category management (5 endpoints): Create, Get, List, Update, Delete\n- âœ… Product catalog with SKU validation (5 endpoints): Create, Get, List, Update, Delete\n- âœ… Stock control with movement tracking (5 endpoints): Get, Increase, Decrease, Low Stock, Depleted\n\n**Features:**\n- âœ… Complete CRUD operations\n- âœ… Partial updates supported\n- âœ… Business rules enforcement (cannot delete categories with products, products with stock)\n- âœ… Low stock and depletion monitoring\n- âœ… Automated tests included\n- âœ… 63+ tests passing\n\n**How to Use:**\n1. Run the \"Create Category\" request first\n2. The category_id will be automatically saved\n3. Run \"Create Product\" with the category_id\n4. Test stock operations, updates, and deletions\n5. All requests include automated tests",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:9002/api",
      "type": "string"
    },
    {
      "key": "category_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "product_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "âš¡ Health Check",
      "description": "System health and availability check",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Service is OK\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(\"ok\");",
                  "    pm.expect(jsonData.service).to.eql(\"inventory-service\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            },
            "description": "Health check endpoint to verify service availability"
          },
          "response": []
        }
      ]
    },
    {
      "name": "ðŸ“‚ Categories",
      "description": "Category management endpoints",
      "item": [
        {
          "name": "Create Category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set('category_id', jsonData.data.id);",
                  "    pm.test('Status code is 201', function () {",
                  "        pm.response.to.have.status(201);",
                  "    });",
                  "    pm.test('Category created successfully', function () {",
                  "        pm.expect(jsonData.message).to.eql('Category created successfully');",
                  "        pm.expect(jsonData.data).to.have.property('id');",
                  "        pm.expect(jsonData.data).to.have.property('slug');",
                  "        pm.expect(jsonData.data.status).to.eql('active');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Electronics\",\n  \"description\": \"Electronic products and accessories\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/v1/categories",
              "host": ["{{base_url}}"],
              "path": ["v1", "categories"]
            },
            "description": "Create a new product category"
          },
          "response": []
        },
        {
          "name": "Get Category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Category retrieved successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('name');",
                  "    pm.expect(jsonData.data).to.have.property('slug');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/v1/categories/{{category_id}}",
              "host": ["{{base_url}}"],
              "path": ["v1", "categories", "{{category_id}}"]
            },
            "description": "Retrieve a category by ID"
          },
          "response": []
        },
        {
          "name": "List Categories",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Categories list returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/v1/categories?status=active",
              "host": ["{{base_url}}"],
              "path": ["v1", "categories"],
              "query": [
                {
                  "key": "status",
                  "value": "active"
                }
              ]
            },
            "description": "List all categories with optional status filter"
          },
          "response": []
        },
        {
          "name": "Update Category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Category updated successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql('Category updated successfully');",
                  "    pm.expect(jsonData.data).to.have.property('updated_at');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Electronics and Computers\",\n  \"description\": \"Electronic products and computer equipment\",\n  \"status\": \"active\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/v1/categories/{{category_id}}",
              "host": ["{{base_url}}"],
              "path": ["v1", "categories", "{{category_id}}"]
            },
            "description": "Update an existing category (partial updates supported)"
          },
          "response": []
        },
        {
          "name": "Delete Category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Status code is 200\", function () {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "    pm.test(\"Category deleted successfully\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData.message).to.eql('Category deleted successfully');",
                  "    });",
                  "}",
                  "",
                  "if (pm.response.code === 409) {",
                  "    pm.test(\"Cannot delete category with products\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData.error).to.eql('CategoryHasProducts');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/v1/categories/{{category_id}}",
              "host": ["{{base_url}}"],
              "path": ["v1", "categories", "{{category_id}}"]
            },
            "description": "Delete a category (fails if it has products)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "ðŸ“¦ Products",
      "description": "Product catalog management endpoints",
      "item": [
        {
          "name": "Create Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set('product_id', jsonData.data.id);",
                  "    pm.test('Status code is 201', function () {",
                  "        pm.response.to.have.status(201);",
                  "    });",
                  "    pm.test('Product created successfully', function () {",
                  "        pm.expect(jsonData.message).to.eql('Product created successfully');",
                  "        pm.expect(jsonData.data).to.have.property('id');",
                  "        pm.expect(jsonData.data).to.have.property('sku');",
                  "        pm.expect(jsonData.data.status).to.eql('active');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Laptop Dell Inspiron 15\",\n  \"sku\": \"LAPTOP-DELL-INSP15-001\",\n  \"price\": 3499.99,\n  \"category_id\": \"{{category_id}}\",\n  \"barcode\": \"7891234567890\",\n  \"description\": \"15.6 inch Full HD, Intel Core i5, 8GB RAM, 256GB SSD\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/v1/products",
              "host": ["{{base_url}}"],
              "path": ["v1", "products"]
            },
            "description": "Create a new product"
          },
          "response": []
        },
        {
          "name": "Get Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Product retrieved successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('name');",
                  "    pm.expect(jsonData.data).to.have.property('sku');",
                  "    pm.expect(jsonData.data).to.have.property('price');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/v1/products/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["v1", "products", "{{product_id}}"]
            },
            "description": "Retrieve a product by ID"
          },
          "response": []
        },
        {
          "name": "List Products",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Products list returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "    pm.expect(jsonData.meta).to.have.property('page');",
                  "    pm.expect(jsonData.meta).to.have.property('per_page');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/v1/products?page=1&per_page=15&status=active",
              "host": ["{{base_url}}"],
              "path": ["v1", "products"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "per_page",
                  "value": "15"
                },
                {
                  "key": "status",
                  "value": "active"
                },
                {
                  "key": "category_id",
                  "value": "{{category_id}}",
                  "disabled": true
                }
              ]
            },
            "description": "List products with pagination and filters"
          },
          "response": []
        },
        {
          "name": "Update Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Product updated successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql('Product updated successfully');",
                  "    pm.expect(jsonData.data).to.have.property('updated_at');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Laptop Dell Inspiron 15 (Updated)\",\n  \"price\": 3299.99,\n  \"description\": \"15.6 inch Full HD, Intel Core i7, 16GB RAM, 512GB SSD\",\n  \"status\": \"active\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/v1/products/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["v1", "products", "{{product_id}}"]
            },
            "description": "Update an existing product (partial updates supported, SKU cannot be changed)"
          },
          "response": []
        },
        {
          "name": "Delete Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Status code is 200\", function () {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "    pm.test(\"Product deleted successfully\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData.message).to.eql('Product deleted successfully');",
                  "    });",
                  "}",
                  "",
                  "if (pm.response.code === 409) {",
                  "    pm.test(\"Cannot delete product with stock\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData.error).to.eql('ProductHasStock');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/v1/products/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["v1", "products", "{{product_id}}"]
            },
            "description": "Delete a product (fails if it has stock)"
          },
          "response": []
        },
        {
          "name": "Validation Error - Missing Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 422\", function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test(\"Validation errors returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('errors');",
                  "    pm.expect(jsonData.errors).to.have.property('name');",
                  "    pm.expect(jsonData.errors).to.have.property('sku');",
                  "    pm.expect(jsonData.errors).to.have.property('price');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"This should fail validation\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/v1/products",
              "host": ["{{base_url}}"],
              "path": ["v1", "products"]
            },
            "description": "Test validation errors for missing required fields"
          },
          "response": []
        }
      ]
    },
    {
      "name": "ðŸ“Š Stock",
      "description": "Stock management and movement tracking endpoints",
      "item": [
        {
          "name": "Get Stock",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Stock retrieved successfully\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData.data).to.have.property('product_id');",
                  "        pm.expect(jsonData.data).to.have.property('quantity');",
                  "        pm.expect(jsonData.data).to.have.property('minimum_quantity');",
                  "        pm.expect(jsonData.data).to.have.property('is_low_stock');",
                  "        pm.expect(jsonData.data).to.have.property('is_depleted');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/v1/stock/product/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["v1", "stock", "product", "{{product_id}}"]
            },
            "description": "Get stock information for a product"
          },
          "response": []
        },
        {
          "name": "Increase Stock",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Stock increased successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql('Stock increased successfully');",
                  "    pm.expect(jsonData.data).to.have.property('quantity');",
                  "    pm.expect(jsonData.data.last_movement_at).to.not.be.null;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"quantity\": 50,\n  \"reason\": \"Purchase order received\",\n  \"reference_id\": \"PO-2024-001\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/v1/stock/product/{{product_id}}/increase",
              "host": ["{{base_url}}"],
              "path": ["v1", "stock", "product", "{{product_id}}", "increase"]
            },
            "description": "Increase stock quantity (purchase, return, etc.)"
          },
          "response": []
        },
        {
          "name": "Decrease Stock",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 400\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Stock decreased successfully\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData.message).to.eql('Stock decreased successfully');",
                  "        pm.expect(jsonData.data).to.have.property('quantity');",
                  "    });",
                  "} else {",
                  "    pm.test(\"Insufficient stock error\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData.error).to.eql('InsufficientStock');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"quantity\": 10,\n  \"reason\": \"Sale completed\",\n  \"reference_id\": \"SALE-2024-042\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/v1/stock/product/{{product_id}}/decrease",
              "host": ["{{base_url}}"],
              "path": ["v1", "stock", "product", "{{product_id}}", "decrease"]
            },
            "description": "Decrease stock quantity (sale, damage, etc.)"
          },
          "response": []
        },
        {
          "name": "Get Low Stock Products",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Low stock list returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "    pm.expect(jsonData.meta).to.have.property('total');",
                  "    ",
                  "    if (jsonData.data.length > 0) {",
                  "        pm.expect(jsonData.data[0]).to.have.property('is_low_stock');",
                  "        pm.expect(jsonData.data[0].is_low_stock).to.be.true;",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/v1/stock/low-stock",
              "host": ["{{base_url}}"],
              "path": ["v1", "stock", "low-stock"]
            },
            "description": "Get all products with stock below minimum threshold"
          },
          "response": []
        },
        {
          "name": "Get Depleted Stock Products",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Depleted stock list returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "    pm.expect(jsonData.meta).to.have.property('total');",
                  "    ",
                  "    if (jsonData.data.length > 0) {",
                  "        pm.expect(jsonData.data[0]).to.have.property('is_depleted');",
                  "        pm.expect(jsonData.data[0].is_depleted).to.be.true;",
                  "        pm.expect(jsonData.data[0].quantity).to.eql(0);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/v1/stock/depleted",
              "host": ["{{base_url}}"],
              "path": ["v1", "stock", "depleted"]
            },
            "description": "Get all products with zero stock"
          },
          "response": []
        },
        {
          "name": "Validation Error - Missing Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 422\", function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test(\"Validation errors returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('errors');",
                  "    pm.expect(jsonData.errors).to.have.property('quantity');",
                  "    pm.expect(jsonData.errors).to.have.property('reason');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{base_url}}/v1/stock/product/{{product_id}}/increase",
              "host": ["{{base_url}}"],
              "path": ["v1", "stock", "product", "{{product_id}}", "increase"]
            },
            "description": "Test validation errors for missing required fields"
          },
          "response": []
        }
      ]
    }
  ]
}