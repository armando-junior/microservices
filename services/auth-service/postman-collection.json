{
  "info": {
    "name": "Auth Service API - Complete",
    "description": "Complete API collection for Auth Service\n\n**Base URL:** http://localhost:9001/api\n**Documentation:** See API-DOCS.md\n\n### Sprint 1 - 100% Complete\n- ‚úÖ Authentication endpoints\n- ‚úÖ User management endpoints\n- ‚úÖ Health check\n- ‚úÖ JWT authentication\n- ‚úÖ 139 tests passing",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:9001/api",
      "type": "string"
    },
    {
      "key": "access_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üîê Authentication",
      "description": "Endpoints for user authentication and token management",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set('access_token', jsonData.data.access_token);",
                  "    pm.collectionVariables.set('user_id', jsonData.data.user.id);",
                  "    pm.test('Status code is 201', function () {",
                  "        pm.response.to.have.status(201);",
                  "    });",
                  "    pm.test('Response has access_token', function () {",
                  "        pm.expect(jsonData.data).to.have.property('access_token');",
                  "    });",
                  "    pm.test('Response has user data', function () {",
                  "        pm.expect(jsonData.data).to.have.property('user');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePass@123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new user account.\n\n**Request:**\n- `name`: Required, 1-100 chars, letters/spaces/hyphens only\n- `email`: Required, valid email, unique\n- `password`: Required, min 8 chars, must contain uppercase, lowercase, digit, special char\n\n**Response (201):**\n```json\n{\n  \"data\": {\n    \"access_token\": \"jwt_token\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 3600,\n    \"user\": {...}\n  }\n}\n```"
          },
          "response": []
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set('access_token', jsonData.data.access_token);",
                  "    pm.collectionVariables.set('user_id', jsonData.data.user.id);",
                  "    pm.test('Status code is 200', function () {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "    pm.test('Response has access_token', function () {",
                  "        pm.expect(jsonData.data).to.have.property('access_token');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePass@123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Authenticate and get access token.\n\n**Request:**\n- `email`: Required, valid email\n- `password`: Required\n\n**Response (200):**\n```json\n{\n  \"data\": {\n    \"access_token\": \"jwt_token\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 3600,\n    \"user\": {...}\n  }\n}\n```"
          },
          "response": []
        },
        {
          "name": "Get Current User (Me)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Response has user data', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/me",
              "host": ["{{base_url}}"],
              "path": ["auth", "me"]
            },
            "description": "Get authenticated user information.\n\n**Authentication:** Required (JWT Bearer Token)\n\n**Response (200):**\n```json\n{\n  \"user\": {\n    \"id\": \"uuid\",\n    \"name\": \"John Doe\",\n    \"email\": \"john@example.com\",\n    \"is_active\": true,\n    \"email_verified_at\": null,\n    \"created_at\": \"2025-10-05T...\",\n    \"updated_at\": \"2025-10-05T...\"\n  }\n}\n```"
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set('access_token', jsonData.auth.access_token);",
                  "    pm.test('Status code is 200', function () {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "    pm.test('Response has new access_token', function () {",
                  "        pm.expect(jsonData.auth).to.have.property('access_token');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/refresh",
              "host": ["{{base_url}}"],
              "path": ["auth", "refresh"]
            },
            "description": "Get a new access token (refresh).\n\n**Authentication:** Required (JWT Bearer Token)\n\n**Response (200):**\n```json\n{\n  \"message\": \"Token refreshed successfully\",\n  \"auth\": {\n    \"access_token\": \"new_jwt_token\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 3600\n  }\n}\n```"
          },
          "response": []
        },
        {
          "name": "Logout User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Logout message received', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["auth", "logout"]
            },
            "description": "Revoke current access token (logout).\n\n**Authentication:** Required (JWT Bearer Token)\n\n**Response (200):**\n```json\n{\n  \"message\": \"Logout successful\"\n}\n```"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üë§ User Management",
      "description": "Endpoints for user profile management (Not yet implemented)",
      "item": [
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}"]
            },
            "description": "**‚ö†Ô∏è NOT YET IMPLEMENTED**\n\nGet user information by ID.\n\n**Authentication:** Required (JWT Bearer Token)"
          },
          "response": []
        },
        {
          "name": "Update User",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Jane Doe\",\n  \"email\": \"jane.doe@example.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}"]
            },
            "description": "**‚ö†Ô∏è NOT YET IMPLEMENTED**\n\nUpdate user information.\n\n**Authentication:** Required (JWT Bearer Token)"
          },
          "response": []
        },
        {
          "name": "Update User (PATCH)",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Smith\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}"]
            },
            "description": "**‚ö†Ô∏è NOT YET IMPLEMENTED**\n\nPartially update user information.\n\n**Authentication:** Required (JWT Bearer Token)"
          },
          "response": []
        },
        {
          "name": "Delete User (Deactivate)",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}"]
            },
            "description": "**‚ö†Ô∏è NOT YET IMPLEMENTED**\n\nDeactivate user account (soft delete).\n\n**Authentication:** Required (JWT Bearer Token)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "‚ùå Error Examples",
      "description": "Examples of error responses",
      "item": [
        {
          "name": "Validation Error (422)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"T\",\n  \"email\": \"invalid-email\",\n  \"password\": \"weak\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            },
            "description": "Example of validation error response.\n\n**Response (422):**\n```json\n{\n  \"message\": \"O e-mail deve ser v√°lido. (and 2 more errors)\",\n  \"errors\": {\n    \"email\": [\"O e-mail deve ser v√°lido.\"],\n    \"password\": [\n      \"A senha deve ter pelo menos 8 caracteres.\",\n      \"A senha deve conter...\"\n    ]\n  }\n}\n```"
          },
          "response": []
        },
        {
          "name": "Duplicate Email (409)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePass@123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            },
            "description": "Example of duplicate email error response.\n\n**Response (409):**\n```json\n{\n  \"error\": \"Email already exists\",\n  \"message\": \"Email already exists: john.doe@example.com\"\n}\n```"
          },
          "response": []
        },
        {
          "name": "Invalid Credentials (401)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"WrongPassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Example of invalid credentials error.\n\n**Response (401):**\n```json\n{\n  \"error\": \"Invalid credentials\",\n  \"message\": \"Invalid credentials\"\n}\n```"
          },
          "response": []
        },
        {
          "name": "Unauthorized (401)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/me",
              "host": ["{{base_url}}"],
              "path": ["auth", "me"]
            },
            "description": "Example of unauthorized access (no token).\n\n**Response (401):**\n```json\n{\n  \"error\": \"Unauthorized\",\n  \"message\": \"Token not provided\"\n}\n```"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üè• Health Check",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test('Service is ok', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.status).to.eql('ok');",
              "    pm.expect(jsonData.service).to.eql('auth-service');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{base_url}}/health",
          "host": ["{{base_url}}"],
          "path": ["health"]
        },
        "description": "Check service health status.\n\n**Authentication:** Not required\n\n**Response (200):**\n```json\n{\n  \"status\": \"ok\",\n  \"service\": \"auth-service\",\n  \"timestamp\": \"2025-10-05T11:43:41+00:00\"\n}\n```"
      },
      "response": []
    }
  ]
}
