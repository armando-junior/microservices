name: Financial Service - E2E Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'services/financial-service/**'
      - 'scripts/e2e-financial-service.sh'
      - 'docker-compose.yml'
      - '.github/workflows/financial-service-e2e.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'services/financial-service/**'
      - 'scripts/e2e-financial-service.sh'
      - 'docker-compose.yml'

jobs:
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Create required directories
        run: |
          mkdir -p services/financial-service/storage/logs
          mkdir -p services/financial-service/storage/framework/cache
          mkdir -p services/financial-service/storage/framework/sessions
          mkdir -p services/financial-service/storage/framework/views
          chmod -R 777 services/financial-service/storage

      - name: Build Financial Service image
        run: |
          docker compose build financial-service

      - name: Start required services
        run: |
          docker compose up -d redis rabbitmq financial-db prometheus grafana

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for Redis..."
          timeout 60 bash -c 'until docker compose exec -T redis redis-cli ping | grep -q PONG; do sleep 1; done'
          
          echo "Waiting for RabbitMQ..."
          timeout 120 bash -c 'until docker compose exec -T rabbitmq rabbitmq-diagnostics -q ping; do sleep 2; done'
          
          echo "Waiting for PostgreSQL (Financial)..."
          timeout 60 bash -c 'until docker compose exec -T financial-db pg_isready -U financial_user; do sleep 1; done'
          
          echo "Waiting for Prometheus..."
          timeout 60 bash -c 'until curl -sf http://localhost:9090/-/healthy > /dev/null; do sleep 1; done'
          
          echo "All services are healthy!"

      - name: Start Financial Service
        run: |
          docker compose up -d financial-service

      - name: Wait for Financial Service to be ready
        run: |
          echo "Waiting for Financial Service to be healthy..."
          timeout 120 bash -c 'until curl -sf http://localhost:9004/health | jq -e ".status == \"healthy\"" > /dev/null; do sleep 2; done'
          echo "Financial Service is ready!"

      - name: Run Database Migrations
        run: |
          docker compose exec -T financial-service php artisan migrate --force
          echo "Migrations completed successfully!"

      - name: Display service logs (before tests)
        if: always()
        run: |
          echo "=== Financial Service Logs ==="
          docker compose logs --tail=50 financial-service || true

      - name: Run E2E Tests
        id: e2e_tests
        run: |
          chmod +x scripts/e2e-financial-service.sh
          ./scripts/e2e-financial-service.sh

      - name: Display service logs (after tests)
        if: always()
        run: |
          echo "=== Financial Service Logs ==="
          docker compose logs --tail=100 financial-service || true
          
          echo "=== PostgreSQL Logs ==="
          docker compose logs --tail=50 financial-db || true
          
          echo "=== Redis Logs ==="
          docker compose logs --tail=50 redis || true

      - name: Check Prometheus metrics
        if: always()
        run: |
          echo "=== Checking Prometheus Metrics ==="
          curl -s http://localhost:9004/metrics | grep -E "^financial_" | head -20 || echo "No metrics found"

      - name: Generate E2E Test Report
        if: always()
        run: |
          echo "# E2E Test Report - Financial Service" > $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.e2e_tests.outcome }}" == "success" ]; then
            echo "✅ **Status**: PASSED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All E2E tests completed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status**: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Some E2E tests failed. Check the logs above for details." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Services Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Check Financial Service
          if curl -sf http://localhost:9004/health > /dev/null 2>&1; then
            echo "| Financial Service | ✅ Running |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Financial Service | ❌ Down |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check PostgreSQL
          if docker compose exec -T financial-db pg_isready -U financial_user > /dev/null 2>&1; then
            echo "| PostgreSQL | ✅ Running |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| PostgreSQL | ❌ Down |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check Redis
          if docker compose exec -T redis redis-cli ping | grep -q PONG; then
            echo "| Redis | ✅ Running |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Redis | ❌ Down |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check Prometheus
          if curl -sf http://localhost:9090/-/healthy > /dev/null 2>&1; then
            echo "| Prometheus | ✅ Running |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Prometheus | ❌ Down |" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Cleanup
        if: always()
        run: |
          docker compose down -v
          docker compose rm -f

