networks:
  microservices-net:
    driver: bridge

volumes:
  # Gateway
  gateway-db-data:
  
  # Message Broker
  rabbitmq-data:
  
  # Cache
  redis-data:
  
  # Databases
  auth-db-data:
  inventory-db-data:
  sales-db-data:
  logistics-db-data:
  financial-db-data:
  
  # Monitoring
  prometheus-data:
  grafana-data:
  elasticsearch-data:
  
  # Services
  auth-service-vendor:
  inventory-service-vendor:
  sales-service-vendor:
  
  # Additional Monitoring
  alertmanager-data:

services:
  # ==========================================
  # API GATEWAY - Kong
  # ==========================================
  
  gateway-db:
    image: postgres:16-alpine
    container_name: gateway-db
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    volumes:
      - gateway-db-data:/var/lib/postgresql/data
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  kong-migration:
    image: kong:latest
    container_name: kong-migration
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: gateway-db
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    networks:
      - microservices-net
    depends_on:
      gateway-db:
        condition: service_healthy
    restart: on-failure

  api-gateway:
    image: kong:latest
    container_name: api-gateway
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: gateway-db
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    ports:
      - "8000:8000"   # Proxy
      - "8443:8443"   # Proxy SSL
      - "8001:8001"   # Admin API
      - "8002:8002"   # Admin GUI
    networks:
      - microservices-net
    depends_on:
      gateway-db:
        condition: service_healthy
      kong-migration:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==========================================
  # MESSAGE BROKER - RabbitMQ
  # ==========================================
  
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
      - ./infrastructure/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./infrastructure/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - microservices-net
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================
  # CACHE & SESSION - Redis
  # ==========================================
  
  redis:
    image: redis:7.2-alpine
    container_name: redis
    command: redis-server --appendonly yes --requirepass redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==========================================
  # DATABASES - PostgreSQL
  # ==========================================
  
  auth-db:
    image: postgres:16-alpine
    container_name: auth-db
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_pass
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d auth_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  inventory-db:
    image: postgres:16-alpine
    container_name: inventory-db
    environment:
      POSTGRES_DB: inventory_db
      POSTGRES_USER: inventory_user
      POSTGRES_PASSWORD: inventory_pass
    volumes:
      - inventory-db-data:/var/lib/postgresql/data
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inventory_user -d inventory_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  sales-db:
    image: postgres:16-alpine
    container_name: sales-db
    environment:
      POSTGRES_DB: sales_db
      POSTGRES_USER: sales_user
      POSTGRES_PASSWORD: sales_pass
    volumes:
      - sales-db-data:/var/lib/postgresql/data
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sales_user -d sales_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  logistics-db:
    image: postgres:16-alpine
    container_name: logistics-db
    environment:
      POSTGRES_DB: logistics_db
      POSTGRES_USER: logistics_user
      POSTGRES_PASSWORD: logistics_pass
    volumes:
      - logistics-db-data:/var/lib/postgresql/data
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U logistics_user -d logistics_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  financial-db:
    image: postgres:16-alpine
    container_name: financial-db
    environment:
      POSTGRES_DB: financial_db
      POSTGRES_USER: financial_user
      POSTGRES_PASSWORD: financial_pass
    volumes:
      - financial-db-data:/var/lib/postgresql/data
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U financial_user -d financial_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==========================================
  # MICROSERVICES
  # ==========================================
  
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile.dev
    container_name: auth-service
    environment:
      APP_NAME: "Auth Service"
      APP_ENV: local
      APP_KEY: base64:J85BSo5qgM8JEdEXBjyWIHjeHvBLNNIPYsgJp0Ud9NE=
      APP_DEBUG: "true"
      APP_URL: http://auth-service:8000
      
      # Database
      DB_CONNECTION: pgsql
      DB_HOST: auth-db
      DB_PORT: 5432
      DB_DATABASE: auth_db
      DB_USERNAME: auth_user
      DB_PASSWORD: auth_pass
      
      # Redis
      REDIS_HOST: redis
      REDIS_PASSWORD: redis_password
      REDIS_PORT: 6379
      CACHE_STORE: redis
      SESSION_DRIVER: file
      
      # RabbitMQ
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASSWORD: admin123
      RABBITMQ_VHOST: /
      
      # JWT
      JWT_SECRET: please-change-this-secret-key-in-production-use-openssl-rand-base64-32
      JWT_TTL: 3600
      JWT_ALGO: HS256
      JWT_ISSUER: auth-service
      
      # Logging
      LOG_CHANNEL: stack
      LOG_LEVEL: info
    ports:
      - "9001:8000"
    volumes:
      - ./services/auth-service:/var/www
      - auth-service-vendor:/var/www/vendor
    networks:
      - microservices-net
    depends_on:
      auth-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  inventory-service:
    build:
      context: ./services/inventory-service
      dockerfile: Dockerfile.dev
    container_name: inventory-service
    environment:
      APP_NAME: "Inventory Service"
      APP_ENV: local
      APP_KEY: base64:K95CSp6rhN9KFeGYCkzXJIkfIwCMOOJQZthKq1Ve0OF=
      APP_DEBUG: "true"
      APP_URL: http://inventory-service:8000
      
      # Database
      DB_CONNECTION: pgsql
      DB_HOST: inventory-db
      DB_PORT: 5432
      DB_DATABASE: inventory_db
      DB_USERNAME: inventory_user
      DB_PASSWORD: inventory_pass
      
      # Redis
      REDIS_HOST: redis
      REDIS_PASSWORD: redis_password
      REDIS_PORT: 6379
      CACHE_STORE: redis
      SESSION_DRIVER: file
      
      # RabbitMQ
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASSWORD: admin123
      RABBITMQ_VHOST: /
      
      # Logging
      LOG_CHANNEL: stack
      LOG_LEVEL: info
    ports:
      - "9002:8000"
    volumes:
      - ./services/inventory-service:/var/www
      - inventory-service-vendor:/var/www/vendor
    networks:
      - microservices-net
    depends_on:
      inventory-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  sales-service:
    build:
      context: ./services/sales-service
      dockerfile: Dockerfile.dev
    container_name: sales-service
    environment:
      APP_NAME: "Sales Service"
      APP_ENV: local
      APP_KEY: base64:S85BSo5qgM8JEdEXBjyWIHjeHvBLNNIPYsgJp0Ud9NE=
      APP_DEBUG: "true"
      APP_URL: http://sales-service:8000
      
      # Database
      DB_CONNECTION: pgsql
      DB_HOST: sales-db
      DB_PORT: 5432
      DB_DATABASE: sales_db
      DB_USERNAME: sales_user
      DB_PASSWORD: sales_pass
      
      # Redis
      REDIS_HOST: redis
      REDIS_PASSWORD: redis_password
      REDIS_PORT: 6379
      CACHE_STORE: redis
      SESSION_DRIVER: file
      
      # RabbitMQ
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASSWORD: admin123
      RABBITMQ_VHOST: /
      
      # JWT
      JWT_SECRET: please-change-this-secret-key-in-production-use-openssl-rand-base64-32
      JWT_TTL: 3600
      JWT_ALGO: HS256
      JWT_ISSUER: auth-service
      
      # Logging
      LOG_CHANNEL: stack
      LOG_LEVEL: info
    ports:
      - "9003:8000"
    volumes:
      - ./services/sales-service:/var/www
      - sales-service-vendor:/var/www/vendor
    networks:
      - microservices-net
    depends_on:
      sales-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # ==========================================
  # TRACING - Jaeger
  # ==========================================
  
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: :9411
      COLLECTOR_OTLP_ENABLED: 'true'
    ports:
      - "5775:5775/udp"   # zipkin.thrift compact
      - "6831:6831/udp"   # jaeger.thrift compact
      - "6832:6832/udp"   # jaeger.thrift binary
      - "5778:5778"       # serve configs
      - "16686:16686"     # serve frontend
      - "14268:14268"     # jaeger.thrift
      - "14250:14250"     # model.proto
      - "9411:9411"       # zipkin
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================
  # LOGGING - Elasticsearch
  # ==========================================
  
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ==========================================
  # LOGGING - Logstash
  # ==========================================
  
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: logstash
    ports:
      - "5044:5044"
      - "9600:9600"
    volumes:
      - ./infrastructure/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    networks:
      - microservices-net
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600/_node/stats || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================
  # LOGGING - Kibana
  # ==========================================
  
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - microservices-net
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ==========================================
  # MONITORING & OBSERVABILITY
  # ==========================================
  
  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus-data:/prometheus
    networks:
      - microservices-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:10.2.2
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/etc/grafana/dashboards
    networks:
      - microservices-net
    depends_on:
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Alertmanager - Alert Management
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager:/etc/alertmanager
      - alertmanager-data:/alertmanager
    networks:
      - microservices-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Node Exporter - Host Metrics
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: node-exporter
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    volumes:
      - /:/host:ro,rslave
    networks:
      - microservices-net
    restart: unless-stopped

  # cAdvisor - Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - microservices-net
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg

  # Redis Exporter - Redis Metrics
  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    container_name: redis-exporter
    environment:
      - REDIS_ADDR=redis:6379
    ports:
      - "9121:9121"
    networks:
      - microservices-net
    depends_on:
      - redis
    restart: unless-stopped

  # PostgreSQL Exporter - Auth DB
  postgres-exporter-auth:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: postgres-exporter-auth
    environment:
      - DATA_SOURCE_NAME=postgresql://auth_user:auth_pass@auth-db:5432/auth_db?sslmode=disable
    ports:
      - "9187:9187"
    networks:
      - microservices-net
    depends_on:
      - auth-db
    restart: unless-stopped

  # PostgreSQL Exporter - Inventory DB
  postgres-exporter-inventory:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: postgres-exporter-inventory
    environment:
      - DATA_SOURCE_NAME=postgresql://inventory_user:inventory_pass@inventory-db:5432/inventory_db?sslmode=disable
    ports:
      - "9188:9187"
    networks:
      - microservices-net
    depends_on:
      - inventory-db
    restart: unless-stopped

  # PostgreSQL Exporter - Sales DB
  postgres-exporter-sales:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: postgres-exporter-sales
    environment:
      - DATA_SOURCE_NAME=postgresql://sales_user:sales_pass@sales-db:5432/sales_db?sslmode=disable
    ports:
      - "9189:9187"
    networks:
      - microservices-net
    depends_on:
      - sales-db
    restart: unless-stopped

